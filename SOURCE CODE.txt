SOURCE CODE
// Import required libraries
#include "ESP8266WiFi.h"
#include "ESPAsyncWebServer.h"
#include <TinyGPSPlus.h>
#include <WiFiClient.h>
// Set to true to define Relay as Normally Open (NO)
#define RELAY_NO false
// Set number of relays
#define NUM_RELAYS 2
// Assign each GPIO to a relay
int relayGPIOs[NUM_RELAYS] = {5, 14};
int ldr1 = D3;
int ldr2 = D4;
int ledstatus;
int ldr1status, ldr2status;
String led = "";
// Replace with your network credentials
const char* ssid = "saimahith";
const char* password = "ratna044444"; 
 
const char* PARAM_INPUT_1 = "relay"; 
const char* PARAM_INPUT_2 = "state";
float latitude , longitude;
String lat_str , lng_str;
TinyGPSPlus gps;
// Create AsyncWebServer object on port 80
AsyncWebServer server(80);
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
 <meta name="viewport" content="width=device-width, initial-scale=1">
 <style>
 html {font-family: Arial; display: inline-block; text-align: center;}
 h2 {font-size: 3.0rem;}
 p {font-size: 3.0rem;}
 body {max-width: 600px; margin:0px auto; padding-bottom: 25px;}
 .switch {position: relative; display: inline-block; width: 120px; height: 68px} 
 .switch input {display: none}
 .slider {position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: 
#ccc; border-radius: 34px}
 .slider:before {position: absolute; content: ""; height: 52px; width: 52px; left: 8px; 
bottom: 8px; background-color: #fff; -webkit-transition: .4s; transition: .4s; border radius: 68px}
 input:checked+.slider {background-color: #2196F3}
 input:checked+.slider:before {-webkit-transform: translateX(52px); -ms-transform: 
translateX(52px); transform: translateX(52px)}
 </style>
</head>
<body>
 <h2>Smart Street Light</h2>
 %BUTTONPLACEHOLDER%
<script>function toggleCheckbox(element) {
 var xhr = new XMLHttpRequest();
 if(element.checked){ xhr.open("GET", "/update?relay="+element.id+"&state=1", 
true); }
 else { xhr.open("GET", "/update?relay="+element.id+"&state=0", true); }
 xhr.send();
}</script>
 <p>
 <h4>%lightCheck%</h4>
 <p>
 <p>
 <span class="gps-labels">Latitude</span> 
 <span id="latitude">%LATITUDE%</span>
 </p>
 <p>
 <span class="gps-labels">Longitude</span>
 <span id="longitude">%LONGITUDE%</span>
 </p>
 <p>
 <i class="fas fa-location-dot" style="color:#059e8a;"></i>
 <a 
href="https://www.google.com/maps/dir/%LATITUDE%,%LONGITUDE%"target="
_blank">Click here!</a> To check the location in Google maps.
 </p>
 
setInterval(function ( ) {
 var xhttp = new XMLHttpRequest();
 xhttp.onreadystatechange = function() {
 if (this.readyState == 4 && this.status == 200) {
 document.getElementById("latitude").innerHTML = this.responseText;
 }
 };
 xhttp.open("GET", "/latitude", true);
 xhttp.send();
}, 1000 ) ;
setInterval(function ( ) {
 var xhttp = new XMLHttpRequest();
 xhttp.onreadystatechange = function() {
 if (this.readyState == 4 && this.status == 200) {
 document.getElementById("longitude").innerHTML = this.responseText;
 }
 };
 xhttp.open("GET", "/longitude", true);
 xhttp.send();
}, 1000 ) ;
</body>
</script>
</html>
)rawliteral";
String relayState(int numRelay)
{
 if(RELAY_NO){
 if(digitalRead(relayGPIOs[numRelay-1])){
 return "";
 }
 else {
 return "checked";
 }
 }
 else {
 if(digitalRead(relayGPIOs[numRelay-1])){
 return "checked";
 }
 else {
 return "";
 }
 }
 return "";
}
// Replaces placeholder with button section in your web page
String processor(const String& var)
{
 //Serial.println(var);
 if(var == "BUTTONPLACEHOLDER")
 {
 String buttons ="";
 for(int i=1; i<=NUM_RELAYS; i++)
 {
 String relayStateValue = relayState(i);
 buttons+= "<h4>Street Light" + String(i) +"</h4><label class=\"switch\"><input 
type=\"checkbox\" onchange=\"toggleCheckbox(this)\" id=\"" + String(i) + "\" "+ 
relayStateValue +"><span class=\"slider\"></span></label>";
 }
 return buttons;
 }
 else if(var == "LATITUDE")
 {
 return String(lat_str);
 }
 else if(var == "LONGITUDE")
 {
 return String(lng_str);
 }
 return String();
}
void setup()
{
 // Serial port for debugging purposes
 Serial.begin(115200);
 // Set all relays to off when the program starts - if set to Normally Open (NO), the 
relay is off when you set the relay to HIGH
 for(int i=1; i<=NUM_RELAYS; i++){
 pinMode(relayGPIOs[i-1], OUTPUT);
 if(RELAY_NO){
 digitalWrite(relayGPIOs[i-1], HIGH);
 }
 else{
 digitalWrite(relayGPIOs[i-1], LOW);
 }
 }
 
 // Connect to Wi-Fi
 WiFi.begin(ssid, password);
 while (WiFi.status() != WL_CONNECTED) {
 delay(1000);
 Serial.println("Connecting to WiFi..");
 }
 // Print ESP8266 Local IP Address
 Serial.println(WiFi.localIP());
 // Route for root / web page
 server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
 request->send_P(200, "text/html", index_html, processor);
 });
 // Send a GET request to 
<ESP_IP>/update?relay=<inputMessage>&state=<inputMessage2>
 server.on("/update", HTTP_GET, [] (AsyncWebServerRequest *request) {
 String inputMessage;
 String inputParam;
 String inputMessage2;
 String inputParam2;
 // GET input1 value on <ESP_IP>/update?relay=<inputMessage>
 if (request->hasParam(PARAM_INPUT_1) & request-
>hasParam(PARAM_INPUT_2)) {
 inputMessage = request->getParam(PARAM_INPUT_1)->value();
 inputParam = PARAM_INPUT_1;
 inputMessage2 = request->getParam(PARAM_INPUT_2)->value();
 inputParam2 = PARAM_INPUT_2;
 if(RELAY_NO){
 Serial.print("NO ");
 digitalWrite(relayGPIOs[inputMessage.toInt()-1], !inputMessage2.toInt());
 }
 else{
 Serial.print("NC ");
 digitalWrite(relayGPIOs[inputMessage.toInt()-1], inputMessage2.toInt());
 }
 }
 else {
 inputMessage = "No message sent";
 inputParam = "none";
 }
 Serial.println(inputMessage + inputMessage2);
 request->send(200, "text/plain", "OK");
 });
 server.on("/latitude", HTTP_GET, [](AsyncWebServerRequest *request)
 {
 request->send(200, "text/plain", String(lat_str));
 });
 server.on("/longitude", HTTP_GET, [](AsyncWebServerRequest *request)
 {
 request->send(200, "text/plain", String(lng_str));
 });
 // Start server
 server.begin();
}
void displayInfo()
{
 if (gps.location.isValid())
 {
 Serial.print("Latitude: ");
 Serial.println(gps.location.lat(), 6);
 Serial.print("Longitude: ");
 Serial.println(gps.location.lng(), 6);
 Serial.print("Altitude: ");
 Serial.println(gps.altitude.meters());
 Serial.print("https://www.google.com/maps/@");
 Serial.print(gps.location.lat(), 6);
 Serial.print(",");
 Serial.println(gps.location.lng(), 6);
 Serial.println("Latitude:");
 Serial.println(latitude);
 Serial.println("Longitude:");
 Serial.println(longitude);
 Serial.println();
 }
 else
 {
 Serial.println("Location: Not Available");
 }
 Serial.println();
 Serial.println();
 delay(1000);
}
 
void loop() 
{
 while (Serial.available() > 0)
 {
 if (gps.encode(Serial.read()))
 displayInfo();
 latitude = gps.location.lat();
 lat_str = String(latitude , 6);
 longitude = gps.location.lng();
 lng_str = String(longitude , 6);
 } 
 ledstatus = digitalRead(14);
 if(ledstatus == 1)
 {
 digitalWrite(4, HIGH);
 delay(100);
 digitalWrite(4, LOW);
 }
 if(ledstatus == 0)
 {
 digitalWrite(4, LOW);
 }
}